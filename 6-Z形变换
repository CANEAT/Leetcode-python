总体思路：先求出满列多少列len(s)//(2*numRows-2)+1，然后再求出总共需要多少列，再根据除了第一行跟最后一行，其他的行都是
某个点左右两边的数距离相同，依次输出。

def convert(s,numRows):
   if len(s)<=numRows or numRows == 1:
        return s
    m = len(s)//(2*numRows-2)+1#求满列
    res = ''
    for j in range(numRows-1):#遍历行
        for i in range(m+1):#遍历列（满列左右两边各一个距离相等的数）
            if (2*numRows-2)*i-j>=0 and (2*numRows-2)*i-j<len(s):
                res+=s[(2*numRows-2)*i-j]
            if 0<=(2*numRows-2)*i+j<len(s):
                if (2*numRows-2)*i+j!=(2*numRows-2)*i-j:
                    if ((2 * numRows - 2) * (i-1) + j) != (2 * numRows - 2) * i - j:
                        res+=s[(2*numRows-2)*i+j]
            else:
                break
    for i in range(m):#最后一列满列旁边没有数，为了避免重复打印，所以单独打
        if (2 * numRows - 2) * i + numRows-1<len(s):
            res +=s[(2 * numRows - 2) * i + numRows-1]
        else:
            break
    return res
 s =  "LEETCODEISHIRING"
numRows =4
print(convert(s,numRows))


以前的思路：
依次把整个表格打印出来，然后拼接，打印，通过了95%,剩下5%超时
def convert(s,numRows):
    if len(s)<=numRows or numRows == 1:
        return s
    s = list(s)
    m = len(s)//(numRows*2-2)+1
    # matrix = [[None]*(m*(numRows-1))]*numRows
    matrix =[]
    res = []
    x =0
    while x<numRows:#建表，不用生成器是因为后面改变一个其他跟着改变，输出都是相同的行
        temp = []
        for i in range(m*(numRows-1)):
            temp.append(None)
        x+=1
        matrix.append(temp)
    for i in range(numRows):
        for j in range(m*(numRows-1)):
            matrix[i][j] = None
    for i in range(len(matrix[0])):#遍历
        if i%(numRows-1)==0:
            for j in range(numRows):
                if s !=[]:
                    matrix[j][i] = s[0]
                    s.pop(0)
                else:
                    break
        else:
            if s !=[]:
                matrix[numRows-1-i%(numRows-1)][i] = s[0]
                s.pop(0)
            else:
                break
    for i in range(len(matrix)):#拼接
        for j in range(len(matrix[0])):
            if matrix[i][j] !=None:
                res.append(matrix[i][j])
    return ''.join(res)
